# umi 4.0.0-canary.20231214.1 不适用场景：
	1、需要支持 IE 8 或更低版本的浏览器
	2、需要支持 React 16.8.0 以下的 React
	3、需要跑在 Node 14 以下的环境中
	4、有很强的 webpack 自定义需求和主观意愿
	5、需要选择不同的路由方案
	
	
# difference of below two files:
pacakge-lock.json: 更进一步地锁定所有模块的版本号，包括主模块和所有依赖子模块。它为每个模块及其每个依赖项指定了版本、位置和完整性哈希, 
当项目中已有package-lock.json文件，在安装项目依赖时，将以该文件为主进行解析安装指定版本依赖包，而不是使用package.json来解析和安装模块。
package.json: 只记录npm install安装的信息，而这些模块依赖的子模块并不会记录。 


# 在package.json文件中，devDependencies和dependencies的区别如下：
1. dependencies：它们是项目运行所依赖的包。
2. devDependencies：它们是项目开发过程中所依赖的包。这些包通常不会直接用于项目的运行


# package.json文件中的scripts片段:

	"dev": "umi dev"：
	当你运行npm run dev或yarn dev（取决于你使用的包管理器）时，它会执行umi dev命令。
	umi dev是Umi框架的一个命令，用于启动开发服务器。

	"build": "umi build"：
	当你运行npm run build或yarn build时，它会执行umi build命令。
	umi build是Umi框架的一个命令，用于构建生产版本的应用。

	"postinstall": "umi setup"：
	这是一个特殊的脚本，它会在package.json中的dependencies被安装之后执行。
	在这里，它执行了umi setup命令。
	umi setup通常用于初始化或设置项目的一些配置。

	"setup": "umi setup"：
	当你运行npm run setup或yarn setup时，它会执行umi setup命令。
	这与上面的"postinstall"脚本功能相同，都是执行Umi的初始化或设置命令。

	"start": "npm run dev"：
	当你运行npm start或yarn start时，它会执行npm run dev。
	这意味着，如果你在项目根目录下运行npm start或yarn start，实际上会执行Umi的dev命令，启动开发服务器。


# 目录和配置
.
├── config
│   └── config.ts
├── dist
├── mock #存放 mock 文件，此目录下所有 .ts / .js 文件会被 mock 服务加载，从而提供模拟数据
│   └── app.ts｜tsx
├── public #存放固定的静态资源，如存放 public/image.png ，则开发时可以通过 /image.png 访问到，构建后会被拷贝到输出文件夹。
├── src
│   ├── .umi #dev 时的临时文件目录，比如入口文件、路由等，都会被临时生成到这里。
│   ├── .umi-production #build 时的临时文件目录，比如入口文件、路由等，都会被临时生成到这里。
│   ├── layouts # 全局布局，默认会在所有路由下生效
│   │   ├── BasicLayout.tsx
│   │   ├── index.less
│   ├── models
│   │   ├── global.ts
│   │   └── index.ts
│   ├── pages #约定式路由默认以 pages/* 文件夹的文件层级结构来生成路由表。
│   │   ├── index.less
│   │   └── index.tsx
│   ├── utils // 推荐目录
│   │   └── index.ts
│   ├── services // 推荐目录
│   │   └── api.ts
│   ├── app.(ts|tsx) #运行时配置 文件，可以在这里扩展运行时的能力，比如修改路由、修改 render 方法等，运行时配置带来的逻辑会在浏览器中运行。
│   ├── global.ts #全局前置脚本文件。
│   ├── global.(css|less|sass|scss) #全局样式文件。
│   ├── overrides.(css|less|sass|scss) #高优先级全局样式文件。
│   ├── favicon.(ico|gif|png|jpg|jpeg|svg|avif|webp) #站点 favicon 图标文件。
│   └── loading.(tsx|jsx) #全局加载组件。
├── node_modules
│   └── .cache
│       ├── bundler-webpack
│       ├── mfsu
│       └── mfsu-deps
├── .env #环境变量配置，如：PORT=8888
├── plugin.ts #项目级 Umi 插件。
├── .umirc.ts // 与 config/config.ts 文件 2 选一，配置文件，包含 Umi 所有非运行时配置（运行时配置一般定义于 app.ts）。
├── package.json
├── tsconfig.json
└── typings.d.ts

#偶尔会出现资源一直加载失败的情况，删除 src/.umi 都不管用，必须将 node_modules/.cache 目录也删掉
------------------------------------------------------------------------------------------------